apiVersion: mocks.microcks.io/v1alpha1
kind: APIVersion
metadata:
  name: quality-on-demand.1.0.0
  displayName: Quality On Demand
  createdAt: '2024-03-18T09:59:00.000Z'
  description: |-
    The Quality-On-Demand (QoD) API provides a programmable interface for developers and other users (API consumers) to request stable latency or throughput managed by networks without the necessity to have an in-depth knowledge of the underlying network complexity (e.g. the 4G/5G system in case of a mobile network).

    # Introduction

    Industrial (IoT), VR/Gaming, live video streaming, autonomous driving and many other scenarios demand network communication quality and are sensitive to any change in transmission conditions. Being able to request a stable latency (reduced jitter) or prioritized throughput from the network can improve user experience substantially.

    The QoD API offers the application developers the capability to request for stable latency (reduced jitter) or throughput for some specified application data flows between application clients (within a user device) and application servers (backend services). The developer has a pre-defined set of Quality of Service (QoS) profiles which they could choose from depending on their latency or throughput requirements.

    ![QoD API Overview](https://raw.githubusercontent.com/camaraproject/QualityOnDemand/r2.2/documentation/API_documentation/resources/QoD_latency_overview.PNG)

    The usage of the API is based on QoS session resources, which can be created (based on available QoS profiles), queried and deleted. The deletion of a requested session can be triggered by the API consumer or can be triggered automatically once the QoS session has reached its limit.

    # Relevant terms and definitions

    * **QOD service endpoint**:
    The URL pointing to the RESTful resource of the QoD API.

    * **Authentication**:
    Security access keys such as OAuth 2.0 client credentials used by client applications to invoke the QoD API.

    * **QoS profiles**:
    Latency, throughput or priority requirements of the application mapped to relevant QoS profile values. The set of QoS Profiles that an API provider is offering may be retrieved via the `qos-profiles` API (cf. https://github.com/camaraproject/QualityOnDemand/) or will be agreed during the onboarding with the API provider.

    * **Identifier for the device**:
    At least one identifier for the device (user equipment) out of four options: IPv4 address, IPv6 address, Phone number, or Network Access Identifier assigned by the mobile network operator for the device. Note: Network Access Identifier is defined for future use and will not be supported with this version of the API.

    * **Identifier for the application server**:
    IPv4 and/or IPv6 address of the application server (application backend)

    * **App-Flow (between the application client and application server)**:
    The precise application data flow the developer wants to prioritize and have stable latency or throughput for. This flow is in the current API version determined by the identified device and the application server. And it can be further elaborated with details such as ports or port-ranges. Future version of the API might allow more detailed flow identification features.

    * **Duration**:
    Duration (in seconds) for which the QoS session (between application client and application server) should be created. Limits for session duration can be set by the implementation for the QoS profile. The user may request a termination before its expiration.

     * **Notification URL and token**:
    The API consumer may provide a callback URL (`sink`) on which notifications about all status change events (eg. provisioning termination) can be received from the API provider. This is an optional parameter. The notification will be sent as a CloudEvent compliant message.
    If `sink` is included, it is RECOMMENDED for the client to provide as well the `sinkCredential` property to protect the notification endpoint. In the current version, `sinkCredential.credentialType` MUST be set to `ACCESSTOKEN` if provided.

    # API functionality

    The usage of the QoD API is based on QoS profile classes and parameters which define App-Flows.
    Based on the API, QoS session resources can be created, queried, and deleted. Once an offered QoS profile class is requested, application users get a prioritized service with stable latency or throughput even in the case of congestion. The QoD API has the following characteristics:

    * A specified App-Flow is prioritized to ensure stable latency or throughput for that flow.
    * The prioritized App-Flow is described by providing information such as device IP address (or other device identifier) & application server IP addresses and port/port-ranges.
    * The developer specifies the duration for which they need the prioritized App-flow.
    * Stable latency or throughput is requested by selecting from the list of QoS profiles made available by the service provider (e.g. QOS_E) to map latency and throughput requirements.
    * The API consumer can optionally also specify callback URL (`sink` param) on which notifications for the session can be sent. <br>

    Following diagram shows the interaction between different components

    ![QoD Management API](https://raw.githubusercontent.com/camaraproject/QualityOnDemand/r2.2/documentation/API_documentation/resources/QoD_details.PNG)

    # Authorization and authentication

    The "Camara Security and Interoperability Profile" provides details of how an API consumer requests an access token. Please refer to Identity and Consent Management (https://github.com/camaraproject/IdentityAndConsentManagement/) for the released version of the profile.

    The specific authorization flows to be used will be agreed upon during the onboarding process, happening between the API consumer and the API provider, taking into account the declared purpose for accessing the API, whilst also being subject to the prevailing legal framework dictated by local legislation.

    In cases where personal data is processed by the API and users can exercise their rights through mechanisms such as opt-in and/or opt-out, the use of three-legged access tokens is mandatory. This ensures that the API remains in compliance with privacy regulations, upholding the principles of transparency and user-centric privacy-by-design.

    # Identifying the device from the access token

    This API requires the API consumer to identify a device as the subject of the API as follows:
    - When the API is invoked using a two-legged access token, the subject will be identified from the optional `device` object, which therefore MUST be provided.

    - When a three-legged access token is used however, this optional identifier MUST NOT be provided, as the subject will be uniquely identified from the access token.

    This approach simplifies API usage for API consumers using a three-legged access token to invoke the API by relying on the information that is associated with the access token and was identified during the authentication process.

    ## Error handling:
    - If the subject cannot be identified from the access token and the optional `device` object is not included in the request, then the server will return an error with the `422 MISSING_IDENTIFIER` error code.

    - If the subject can be identified from the access token and the optional `device` object is also included in the request, then the server will return an error with the `422 UNNECESSARY_IDENTIFIER` error code. This will be the case even if the same device is identified by these two methods, as the server is unable to make this comparison.

    # Multi-SIM scenario handling

    In multi-SIM scenarios where more than one mobile device is associated with a phone number (e.g. a smartphone with an associated smartwatch), it might not be possible to uniquely identify the device to which the enhanced QoS profile should apply from that phone number. If the phone number is used as the device identifier when creating a QoS session in a multi-SIM scenario, the API may respond with an error, apply the enhanced QoS profile to all devices in the multi-SIM group, or apply the enhanced QoS profile to a single device in the multi-SIM group which may not be the intended device.

    Possible solutions in such a scenario include:
    - Using the authorisation code flow to obtain an access token, which will automatically identify the intended device
    - Identifying the intended device from a unique identifier for that device, such as its source IP address and port
    - Check with the SIM provider whether a unique "secondary" phone number is already associated with each device, and use the secondary phone number to identify the intended device if available

    # Further info and support

    (FAQs will be added in a later version of the documentation)

  icon:
    - base64data: iVBORw0KGgoAAAANSUhEUgAAAEoAAABKCAYAAAAc0MJxAAAACXBIWXMAAAsTAAALEwEAmpwYAAAFGmlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQiPz4gPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iQWRvYmUgWE1QIENvcmUgNi4wLWMwMDYgNzkuMTY0NzUzLCAyMDIxLzAyLzE1LTExOjUyOjEzICAgICAgICAiPiA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPiA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtbG5zOmRjPSJodHRwOi8vcHVybC5vcmcvZGMvZWxlbWVudHMvMS4xLyIgeG1sbnM6cGhvdG9zaG9wPSJodHRwOi8vbnMuYWRvYmUuY29tL3Bob3Rvc2hvcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RFdnQ9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZUV2ZW50IyIgeG1wOkNyZWF0b3JUb29sPSJBZG9iZSBQaG90b3Nob3AgMjIuMyAoTWFjaW50b3NoKSIgeG1wOkNyZWF0ZURhdGU9IjIwMjItMTAtMTRUMTE6MzQ6NDItMDQ6MDAiIHhtcDpNb2RpZnlEYXRlPSIyMDIyLTEwLTE0VDExOjM1OjMxLTA0OjAwIiB4bXA6TWV0YWRhdGFEYXRlPSIyMDIyLTEwLTE0VDExOjM1OjMxLTA0OjAwIiBkYzpmb3JtYXQ9ImltYWdlL3BuZyIgcGhvdG9zaG9wOkNvbG9yTW9kZT0iMyIgcGhvdG9zaG9wOklDQ1Byb2ZpbGU9InNSR0IgSUVDNjE5NjYtMi4xIiB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOmIxZDI0ZDNiLTQ5YWUt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
      mediatype: image/png
spec:
  version: '1.0.0'
  capabilities: Incomplete Mocks 
  contracts:
    - type: openapi
      url: https://github.com/camaraproject/QualityOnDemand/blob/r2.2/code/API_definitions/quality-on-demand.yaml
  links:
    - name: CamaraProject.org mocks repository
      url: https://github.com/microcks/microcks-quickstarters
  maintainers:
    - email: laurent@microcks.io
      name: Laurent Broudoux
  keywords:
    - camara
    - 5g
    - quality